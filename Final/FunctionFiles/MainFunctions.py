
import json
from typing import cast
import regex as re
import numpy as np
from FieldScrappers import *
import datetime
import uuid
import os

def analyzeJSON(path: str):
    # name of the file, used later for cache
    jsonName = os.path.split(path)[1]
    ogFilename = os.path.splitext(jsonName)[0] # To remove the extension
    try:
        with open(path, mode='r') as fp:
            data = json.load(fp)
    except:
        #IOError or file not found
        print("Error file not found")
        return None
    
    keys = data.keys()
    # array of dictionaries for the final zip
    dicArr = []

    for filename in data.keys():
        dic = {} 
        #Cache the text so we dont have to keep addressing the HashMap
        currentText = data[filename]
        #Autogenerated fields
        dic["FILENAME"] = filename
        dic["REGISTRO"] = str(uuid.uuid4())
        dic["FechaRegistro"] = datetime.date.today().strftime("%d/%m/%Y")
        # we will store all information inside this dic
        # findNIF searches the file with a regex and returns all
        # NIFS in the file
        nif = findNIF(currentText)
        dic["NIF"] = nif
        # Emails
        emails = getEmails(currentText)
        dic["Email"] = emails;
        # Phones
        phones = getPhoneNumbers(currentText)
        dic["Telefono"] = phones
        # get all dates on the file
        datesList = getAllDates(currentText)
        dic["FechasExpediciÃ³n"] = datesList

        ####################################################
        # The code inside this section performs all operations related with
        # the prices
        (allPrices, total) = getAllPricesAndTotal(currentText)
        dic["ListaPrecios"] = allPrices
        dic["PrecioTotal"] = total
        # Attempt to get the base and the IVA quantity
        sumtwo = twoSumGetMostLikely(allPrices, total)
        # If sumtwo has value, we found a combination that 
        # adds up to the total price
        if sumtwo:
            basePrice = max(sumtwo)
            ivaPrice = min(sumtwo)
            ivaPercent = round(((total - basePrice)/basePrice) * 100, 2)
            dic["BASE"] = basePrice
            dic["IVACANT"] = ivaPrice
            dic["%IVA"] = ivaPercent

        else:
            # WARNING: brute force algorithm, can take a while to calculate.
            # this will only calculate if twosum is not found 
            IVAOPTIONS = [0, 0.04, 0.1, 0.105, 0.106, 0.21]
            allBases = getAllpossibleIVAConfigs(IVAOPTIONS, allPrices, total)
            dic["BASE"] = allBases
            if allBases:
                dic["IVACANT"] = [el for el in np.multiply(IVAOPTIONS, allBases) if el > 0]
                dic["%IVA"] = [IVAOPTIONS[i] for i in range(len(IVAOPTIONS)) if allBases[i] != 0]
            else:
                dic["IVACANT"] = []
                dic["%IVA"] = []
        ####################################################
        # Finally append this to the global array of dictionaries
        dicArr.append(dic)
        finalDic = dict(zip(data.keys(), dicArr))
        # We cache the obtained results, relative to the directory of THIS file
        cacheResults(finalDic, ogFilename)

    return finalDic

def cacheResults(input : dict, ogFilename : str):
    _thisFileDirectory = os.path.dirname(__file__)
    rootDir = os.path.split(_thisFileDirectory)[0]
    analizedDir = os.path.join(rootDir, "AnalyzedInvoices")
    os.makedirs(analizedDir, exist_ok=True)

    newDir = os.path.join(analizedDir, ogFilename)
    os.makedirs(newDir, exist_ok=True)
    for filename in input.keys():
        with open(newDir + "/" + filename +".json", "w") as fp:
            json.dump(input[filename], fp, indent=4)



if __name__ == "__main__":
    """
    _thisFileDirectory = os.path.dirname(__file__)
    rootDir = os.path.split(_thisFileDirectory)[0]
    analizedDir = os.path.join(rootDir, "AnalyzedInvoices")
    ogFilename = os.path.split("./TrabajoPython2021/dict_wB.json")[1]
    ogFilename = os.path.splitext(ogFilename)[0]
    print(os.path.join(analizedDir, ogFilename))
    """
    provisionalDic = analyzeJSON("./TrabajoPython2021/dict_wB.json")
